%% FPGA-Based Digital RF Frontend - FIR Filter Design
% This script designs FIR filters and generates coefficients for the
% RF frontend system
%
% Author: pater234
% Date: 2025
% Target: Xilinx Series 7, UltraScale, UltraScale+

clear all; close all; clc;

%% Design Parameters
fs = 100e6;              % Sample rate (100 MHz)
fpass = 10e6;            % Passband frequency (10 MHz)
fstop = 15e6;            % Stopband frequency (15 MHz)
ripple_pass = 0.1;       % Passband ripple (dB)
atten_stop = 60;         % Stopband attenuation (dB)
num_taps = 64;           % Number of filter taps

%% Filter Design
fprintf('Designing FIR filter...\n');
fprintf('Sample rate: %.1f MHz\n', fs/1e6);
fprintf('Passband: %.1f MHz\n', fpass/1e6);
fprintf('Stopband: %.1f MHz\n', fstop/1e6);
fprintf('Number of taps: %d\n', num_taps);

% Design low-pass FIR filter using Parks-McClellan algorithm
h = firpm(num_taps-1, [0 fpass fstop fs/2]/(fs/2), [1 1 0 0], [1 1]);

% Normalize coefficients
h = h / max(abs(h));

%% Frequency Response Analysis
fprintf('\nAnalyzing frequency response...\n');

% Calculate frequency response
[H, f] = freqz(h, 1, 1024, fs);

% Convert to dB
H_db = 20*log10(abs(H));

% Find passband and stopband characteristics
passband_idx = f <= fpass;
stopband_idx = f >= fstop;

max_passband_ripple = max(H_db(passband_idx)) - min(H_db(passband_idx));
min_stopband_atten = -min(H_db(stopband_idx));

fprintf('Passband ripple: %.2f dB\n', max_passband_ripple);
fprintf('Stopband attenuation: %.2f dB\n', min_stopband_atten);

%% Plot Results
figure('Name', 'FIR Filter Design', 'Position', [100, 100, 1200, 800]);

% Frequency response
subplot(2,2,1);
plot(f/1e6, H_db, 'b-', 'LineWidth', 2);
grid on;
xlabel('Frequency (MHz)');
ylabel('Magnitude (dB)');
title('FIR Filter Frequency Response');
xlim([0 fs/2e6]);
ylim([-80 5]);

% Mark passband and stopband
hold on;
plot([0 fpass/1e6], [-ripple_pass/2 -ripple_pass/2], 'r--', 'LineWidth', 1);
plot([0 fpass/1e6], [ripple_pass/2 ripple_pass/2], 'r--', 'LineWidth', 1);
plot([fstop/1e6 fs/2e6], [-atten_stop -atten_stop], 'r--', 'LineWidth', 1);
legend('Filter Response', 'Specification', 'Location', 'SouthWest');

% Impulse response
subplot(2,2,2);
stem(0:length(h)-1, h, 'b-', 'LineWidth', 1.5);
grid on;
xlabel('Sample');
ylabel('Amplitude');
title('FIR Filter Impulse Response');

% Phase response
subplot(2,2,3);
phase = unwrap(angle(H));
plot(f/1e6, phase*180/pi, 'g-', 'LineWidth', 2);
grid on;
xlabel('Frequency (MHz)');
ylabel('Phase (degrees)');
title('FIR Filter Phase Response');
xlim([0 fs/2e6]);

% Group delay
subplot(2,2,4);
gd = -diff(phase) ./ diff(2*pi*f/fs);
plot(f(1:end-1)/1e6, gd, 'm-', 'LineWidth', 2);
grid on;
xlabel('Frequency (MHz)');
ylabel('Group Delay (samples)');
title('FIR Filter Group Delay');
xlim([0 fs/2e6]);

%% Coefficient Quantization
fprintf('\nQuantizing coefficients...\n');

% Quantize to 18-bit fixed-point (Q16.2 format)
coeff_width = 18;
fractional_bits = 2;
integer_bits = coeff_width - fractional_bits - 1; % -1 for sign bit

% Scale coefficients to fit in fixed-point format
max_coeff = max(abs(h));
scale_factor = (2^(integer_bits) - 2^(-fractional_bits)) / max_coeff;
h_scaled = h * scale_factor;

% Quantize
h_quantized = round(h_scaled * 2^fractional_bits) / 2^fractional_bits;

% Convert to fixed-point representation
h_fixed = round(h_quantized * 2^fractional_bits);

% Check quantization effects
[H_quant, f] = freqz(h_quantized, 1, 1024, fs);
H_quant_db = 20*log10(abs(H_quant));

fprintf('Coefficient width: %d bits\n', coeff_width);
fprintf('Fractional bits: %d\n', fractional_bits);
fprintf('Scale factor: %.6f\n', scale_factor);

%% Generate Verilog Coefficient File
fprintf('\nGenerating Verilog coefficient file...\n');

% Create coefficient file
filename = '../rtl/fir_coefficients.v';
fid = fopen(filename, 'w');

fprintf(fid, '//=============================================================================\n');
fprintf(fid, '// FIR Filter Coefficients - Auto-generated by MATLAB\n');
fprintf(fid, '//=============================================================================\n');
fprintf(fid, '// Filter Design Parameters:\n');
fprintf(fid, '// Sample Rate: %.1f MHz\n', fs/1e6);
fprintf(fid, '// Passband: %.1f MHz\n', fpass/1e6);
fprintf(fid, '// Stopband: %.1f MHz\n', fstop/1e6);
fprintf(fid, '// Number of Taps: %d\n', num_taps);
fprintf(fid, '// Coefficient Width: %d bits\n', coeff_width);
fprintf(fid, '//=============================================================================\n\n');

fprintf(fid, 'module fir_coefficients (\n');
fprintf(fid, '    input wire [7:0] addr,\n');
fprintf(fid, '    output reg [17:0] coeff\n');
fprintf(fid, ');\n\n');

fprintf(fid, 'always @(*) begin\n');
fprintf(fid, '    case (addr)\n');

for i = 1:length(h_fixed)
    if h_fixed(i) >= 0
        fprintf(fid, '        8''h%02X: coeff = 18''h%05X; // %.6f\n', ...
            i-1, h_fixed(i), h_quantized(i));
    else
        fprintf(fid, '        8''h%02X: coeff = 18''h%05X; // %.6f\n', ...
            i-1, 2^18 + h_fixed(i), h_quantized(i));
    end
end

fprintf(fid, '        default: coeff = 18''h00000;\n');
fprintf(fid, '    endcase\n');
fprintf(fid, 'end\n\n');

fprintf(fid, 'endmodule\n');
fclose(fid);

fprintf('Coefficient file generated: %s\n', filename);

%% Generate C Header File
fprintf('\nGenerating C header file...\n');

filename = '../sim/test_vectors/fir_coefficients.h';
fid = fopen(filename, 'w');

fprintf(fid, '//=============================================================================\n');
fprintf(fid, '// FIR Filter Coefficients - C Header File\n');
fprintf(fid, '//=============================================================================\n');
fprintf(fid, '// Auto-generated by MATLAB filter_design.m\n\n');

fprintf(fid, '#ifndef FIR_COEFFICIENTS_H\n');
fprintf(fid, '#define FIR_COEFFICIENTS_H\n\n');

fprintf(fid, '#define FIR_NUM_TAPS %d\n', num_taps);
fprintf(fid, '#define FIR_COEFF_WIDTH %d\n\n', coeff_width);

fprintf(fid, '// FIR filter coefficients (Q16.2 fixed-point format)\n');
fprintf(fid, 'const int32_t fir_coefficients[FIR_NUM_TAPS] = {\n');

for i = 1:length(h_fixed)
    if i == length(h_fixed)
        fprintf(fid, '    %d  // tap %d: %.6f\n', h_fixed(i), i-1, h_quantized(i));
    else
        fprintf(fid, '    %d, // tap %d: %.6f\n', h_fixed(i), i-1, h_quantized(i));
    end
end

fprintf(fid, '};\n\n');
fprintf(fid, '#endif // FIR_COEFFICIENTS_H\n');
fclose(fid);

fprintf('C header file generated: %s\n', filename);

%% Performance Analysis
fprintf('\nPerformance Analysis:\n');

% Calculate filter complexity
num_multipliers = num_taps;
num_adders = num_taps - 1;

fprintf('Number of multipliers: %d\n', num_multipliers);
fprintf('Number of adders: %d\n', num_adders);
fprintf('Total operations per sample: %d\n', num_multipliers + num_adders);

% Estimate resource usage for Xilinx FPGA
% Assuming 18x18 multipliers in DSP48E1/E2
dsp_slices = ceil(num_multipliers / 2); % Some multipliers can be shared
lut_usage = num_adders * 18; % Rough estimate for adders
ff_usage = num_taps * 18; % Delay line flip-flops

fprintf('\nEstimated FPGA Resource Usage:\n');
fprintf('DSP48E1/E2 slices: %d\n', dsp_slices);
fprintf('LUTs (estimated): %d\n', lut_usage);
fprintf('Flip-flops (estimated): %d\n', ff_usage);

%% Save Design Data
fprintf('\nSaving design data...\n');

save('../matlab/fir_filter_design.mat', 'h', 'h_quantized', 'h_fixed', ...
     'fs', 'fpass', 'fstop', 'num_taps', 'coeff_width', 'fractional_bits');

fprintf('Design data saved to fir_filter_design.mat\n');

%% Summary
fprintf('\n=== FIR Filter Design Summary ===\n');
fprintf('Filter Type: Low-pass FIR\n');
fprintf('Design Method: Parks-McClellan\n');
fprintf('Sample Rate: %.1f MHz\n', fs/1e6);
fprintf('Passband: 0 - %.1f MHz\n', fpass/1e6);
fprintf('Stopband: %.1f - %.1f MHz\n', fstop/1e6, fs/2e6);
fprintf('Number of Taps: %d\n', num_taps);
fprintf('Coefficient Width: %d bits (Q%d.%d)\n', coeff_width, integer_bits, fractional_bits);
fprintf('Passband Ripple: %.2f dB\n', max_passband_ripple);
fprintf('Stopband Attenuation: %.2f dB\n', min_stopband_atten);
fprintf('Estimated DSP Slices: %d\n', dsp_slices);

fprintf('\nDesign completed successfully!\n'); 